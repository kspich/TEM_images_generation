# -*- coding: utf-8 -*-
"""vectorization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PFur2St8WYIhMzo2dQaBBulTQBvLQV5h
"""

from sentence_transformers import SentenceTransformer
from scipy import spatial
from PIL import Image
import pandas as pd
import numpy as np
import copy
import os
import matplotlib

model_name = 'clip-ViT-B-32'
st_model = SentenceTransformer(model_name)

def vectorize(img_path: str, model: SentenceTransformer=st_model) -> np.array:
    img = Image.open(img_path)
    return st_model.encode(img)

def create_samples_df(images_folder: str, model: SentenceTransformer=st_model) -> pd.DataFrame:
    data_dict = dict()
    for file_name in os.listdir(images_folder):
        if os.path.isfile(images_folder + file_name):
            image_path = images_folder + file_name
            emb = vectorize(image_path)
            data_dict[file_name] = emb
    return pd.DataFrame(data_dict.items(), columns=['Image', 'Embedding'])

def cos_dist(emb_a: np.array, emb_b: np.array) -> float:
    result_distance = spatial.distance.cosine(emb_a, emb_b)
    return result_distance

def create_vectors_df(images_folder: str, model: SentenceTransformer=st_model) -> pd.DataFrame:
    data_dict = dict()
    for file_name in os.listdir(images_folder):
        if os.path.isfile(images_folder + file_name):
            image_path = images_folder + file_name
            emb = vectorize(image_path)
            data_dict[file_name] = emb
    return pd.DataFrame(data_dict.items(), columns=['Image', 'Embedding'])

def calculate_metrics_for_images(input_img_path: str, images_db: pd.DataFrame, n: int=1) -> pd.DataFrame:
    input_vec = vectorize(input_img_path)
    result_df = copy.deepcopy(images_db)
    result_df['Distance_with_input'] = result_df.apply(lambda x: cos_dist(input_vec, x['Embedding']), axis=1)
    result_df_sorted =    result_df.sort_values('Distance_with_input').reset_index()
    result_df_sorted = result_df_sorted[['Image', 'Distance_with_input']]
    return result_df_sorted

images_folder = 'samples/'
images_db = create_vectors_df(images_folder)
synthetic_img_path = 'my_sample.tif'
result_df = calculate_metrics_for_images(synthetic_img_path, images_db)

print(result_df.to_string())